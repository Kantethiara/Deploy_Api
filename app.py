import os
import warnings
import urllib3
from typing import List, Tuple

from dotenv import load_dotenv
from elasticsearch import Elasticsearch
from sentence_transformers import SentenceTransformer
from langchain.agents import Tool, initialize_agent, AgentType
from langchain.memory import ConversationBufferMemory
from langchain_groq import ChatGroq
from langchain_core.messages import SystemMessage

from langdetect import detect
from langdetect.lang_detect_exception import LangDetectException


# D√©sactivation des avertissements
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings("ignore")
load_dotenv()


class PremiumFiscalAssistant:
    def __init__(self):
        self.mots_cles_fiscaux = {
            "imp√¥t", "impot", "taxe", "tva", "TVA", "CFPNB","etax", "cfpnb", "PV", "pv", "PME", "quitus", 
            "PCF", "fiscalit√©", "d√©claration", "CGU", "Patente", "r√©capitulatifs", "exon√©ration", 
            "remboursement", "trop per√ßu", "d√©lai", "quitus fiscal", "d√©lai de paiement", 
            "quittance", "r√©c√©piss√©", "revenus", "formalisation", "contribution", "taxation", "cadastre",
            "redevance", "contribution fonci√®re", "taxe sur les v√©hicules", "taxe sur les biens",
            "taxe sur les op√©rations", "taxe sur les produits", "taxe sur les services",
            "droit d'enregistrement", "droits d'enregistrement", "taxes d'enregistrement", 
            "entreprise", "changement de statuts", "taxes sur les salaires", "taxe sur les salaires", 
            "taxe fonci√®re", "taxe professionnelle", "NINEA", "direct", "indirect", "r√©ouverture",
            "taxe sur la valeur ajout√©e", "passeport", "taxe sur les boissons", "r√©ductions", 
            "immatriculation", "propri√©taire", "compte", "duplicata", "IR", "IS", "patente", 
            "douane", "r√©gime fiscal", "code g√©n√©ral des imp√¥ts", "proc√©dure", 
            "acte administratif", "exon√©rations", "obligation fiscale", "p√©nalit√©", "penalite", 
            "amende", "contr√¥le fiscal", "d√©marrage des activit√©s", "homologation", "acte", 
            "titre", "SIGTAS", "imposition", "bail", "foncier b√¢ti", "foncier non b√¢ti", "TEOM", 
            "v√©rification", "versement", "tr√©sor", "TVA d√©ductible", "TVA collect√©e", 
            "TVA non r√©cup√©rable", "non-assujetti", "assujetti", "centre des imp√¥ts", 
            "r√©gularisation", "d√©ductibilit√©", "d√©claration mensuelle", "d√©claration annuelle", 
            "num√©ro fiscal", "avis d'imposition", "bordereau de paiement", "num√©ro IFU", "COFI",
            "fiscale", "fiscaux", "fiscal", "DGID", "impotsetdomaines", "dgi", "direction g√©n√©rale des imp√¥ts"
        }
        
        self.es = self._init_elasticsearch()
        self.embedder = self._init_embedder()
        self.llm = self._init_llm()
        self.agent = self._init_agent()
        self.response_cache = {}
        self.last_query = None

    def _init_elasticsearch(self):
        """Initialisation de la connexion Elasticsearch"""
        try:
            es = Elasticsearch(
                hosts=["https://52be-41-82-223-79.ngrok-free.app"],
                basic_auth=(os.getenv("ELASTIC_USER"), os.getenv("ELASTIC_PASSWORD")),
                verify_certs=False,
                request_timeout=45
            )
            
            if not es.ping():
                raise ConnectionError("‚ùå Impossible de se connecter √† Elasticsearch")
            

            
            if not es.indices.exists(index="assistant_fiscal_v2"):
                print("‚ö†Ô∏è L'index 'assistant_fiscal_v2' n'existe pas. Cr√©ez-le avec le mapping appropri√©.")

            print("‚úÖ Connexion Elasticsearch √©tablie")

            return es
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur Elasticsearch : {e}")
            return None

    def _init_embedder(self):
        """Chargement du mod√®le d'embedding"""
        return SentenceTransformer("sentence-transformers/paraphrase-multilingual-mpnet-base-v2")

    def _init_llm(self):
        """Configuration du LLM"""
        return ChatGroq(
            api_key=os.getenv("GROQ_API_KEY"),
            model_name="llama3-70b-8192",
            temperature=0.2,
            max_tokens=1500
        )

    def _get_contextual_results(self, query: str) -> Tuple[List[str], float]:
        """Recherche optimis√©e dans Elasticsearch"""
        try:
            res = self.es.search(
                index="assistant_fiscal_v2",
                body={
                    "query": {
                        "bool": {
                            "must": [
                                {
                                    "multi_match": {
                                        "query": query,
                                        "fields": ["question^3", "reponse^2", "tags"],
                                        "type": "best_fields"
                                    }
                                }
                            ]
                        }
                    },
                    "size": 3
                }
            )

            hits = res.get('hits', {}).get('hits', [])
            if not hits:
                return [], 0

            best_score = hits[0]['_score']
            responses = [hit['_source']['reponse'] for hit in hits]
            
            print("\nüîç R√©sultats de recherche :")
            for i, hit in enumerate(hits[:3]):
                print(f"{i+1}. Score: {hit['_score']:.2f} | Question: {hit['_source']['question']}")
            
            return responses, best_score

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur recherche Elasticsearch: {e}")
            return [], 0

    def _gerer_salutation(self):
        """Gestion simplifi√©e des salutations"""
        return "üíº Bonjour ! Assistant fiscal s√©n√©galais √† votre service. Posez-moi vos questions sur les imp√¥ts et taxes."

    def _est_question_fiscale(self, query: str) -> bool:
        """D√©termine si la question est de nature fiscale"""
        query_lower = query.lower()
        salutations = {"bonjour", "salut", "hello", "bonsoir", "coucou", "hi", "salam"}
        
        if any(salut in query_lower for salut in salutations):
            return False
            
        return any(mot in query_lower for mot in self.mots_cles_fiscaux)

    def recherche_fiscale(self, query: str) -> str:
        """Version stricte qui ne r√©pond qu'aux questions fiscales"""
        print(f"üéØ Appel √† recherche_fiscale avec : {query}")

        # √âtape 1 : D√©tection de la langue
        try:
            langue = detect(query)
            if langue != "fr":
                return "‚õî Veuillez poser votre question en fran√ßais uniquement."
        except LangDetectException:
            return "‚ö†Ô∏è Impossible de d√©tecter la langue de votre question."

        # √âtape 2 : Gestion des salutations
        if not self._est_question_fiscale(query):
            return (
                "‚õî Je suis strictement limit√© aux questions fiscales s√©n√©galaises. "
                "Posez-moi une question sur les imp√¥ts, taxes, d√©clarations fiscales, etc. "
                "Pour plus d'informations, consultez : https://www.dgid.sn/procedures-fiscales/"
            )

        # √âtape 3 : Recherche contextuelle uniquement pour les questions fiscales
        responses, score = self._get_contextual_results(query)
        
        if responses:
            return responses[0]
        else:
            return (
                "üîç Je n'ai pas trouv√© de r√©ponse pr√©cise dans ma base de donn√©es fiscales. "
                "Consultez le site officiel : https://www.dgid.sn/procedures-fiscales/"
            )

    def vider_cache(self):
        """Vide le cache des r√©ponses"""
        self.response_cache.clear()
        print("üóëÔ∏è Cache vid√© avec succ√®s !")

    def _init_agent(self):
        """Initialisation de l'agent LangChain avec un outil fiscal strict"""
        fiscal_tool = Tool(
            name="BaseFiscalePremium",
            func=self.recherche_fiscale,
            description=(
                "üîç Outil strictement limit√© √† la fiscalit√© s√©n√©galaise. "
                "R√©pondez uniquement en fran√ßais, meme si lE LLM DONNE UNE REPONSE EN ANGLAIS TRADUIT LA EN fran√ßais. "
                "Ne r√©pond qu'aux questions sur les imp√¥ts, taxes, d√©clarations, "
                "proc√©dures fiscales et textes de loi. Renvoie syst√©matiquement vers "
                "https://www.dgid.sn/procedures-fiscales/ pour les questions non fiscales."
            )
        )

        return initialize_agent(
            tools=[fiscal_tool],
            llm=self.llm,
            agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
            memory=ConversationBufferMemory(
                memory_key="chat_history",
                return_messages=True,
                output_key='output'
            ),
            verbose=False,
            max_iterations=4,
            early_stopping_method="generate",
            agent_kwargs={
               "system_message": SystemMessage(content="""
üéì Vous √™tes un expert fiscal s√©n√©galais STRICT, sp√©cialis√© uniquement dans le droit fiscal.

R√àGLES ABSOLUES :
1. NE R√âPONDEZ QU'AUX QUESTIONS FISCALES
2. Pour toute question non fiscale, r√©pondez :
   "‚õî D√©sol√©, je suis strictement limit√© aux questions fiscales s√©n√©galaises. Consultez https://www.dgid.sn/procedures-fiscales/"
3. Structurez toujours vos r√©ponses en :
   - Contexte fiscal
   - Points cl√©s (3-5 maximum)
   - R√©f√©rence l√©gale si disponible
   - Lien vers DGID si pertinent
   - R√©pondez UNIQUEMENT en fran√ßais
   - Pour les salutations comme Bonjour, Salut, hi, r√©pondez "Bonjour ! Je suis votre assistant fiscal s√©n√©galais. Posez-moi vos questions sur les imp√¥ts et taxes."
EXEMPLES DE R√âPONSES :

‚úÖ "Quelles sont les obligations fiscales pour cr√©er une entreprise ?"
‚Üí "Pour cr√©er une entreprise au S√©n√©gal, voici les aspects fiscaux :
   1. Immatriculation au registre fiscal (NINEA)
   2. D√©claration d'existence sous 30 jours
   3. Paiement de la patente
   R√©f: Code g√©n√©ral des imp√¥ts, Article 12. Plus d'infos: https://www.dgid.sn"

NE FAITES PAS :
- De suppositions hors domaine fiscal
- De r√©ponses cr√©atives non fiscales
- D'interpr√©tations personnelles
-Ne r2pondez JAMAIS en anglais
""")
            }
        )

    def run(self):
        """Lancement de l'interface utilisateur"""
        print("\n" + "="*50)
        print("ASSISTANT FISCAL PREMIUM - S√âN√âGAL ".center(50))
        print("="*50)
        print(self._gerer_salutation())
        
        while True:
            try:
                user_input = input("\nVotre question fiscale : ").strip()
                
                if user_input.lower() in ['au revoir', 'merci', 'quit', 'q']:
                    print("\nMerci pour votre confiance. √Ä bient√¥t !")
                    break
                
                if user_input.lower() in ['bonjour', 'salut', 'salam', 'hi']:
                    print("\nBonjour ! Je suis votre assistant fiscal s√©n√©galais. Posez-moi vos questions sur la fiscalit√©.")
                    continue
                   
                    
                if user_input.lower() in ['vider cache', 'reset']:
                    self.vider_cache()
                    continue
                    
                print("\nüîç Consultation de la base fiscale...")
                response = self.agent.invoke({"input": user_input})
                print("\nüìå R√©ponse :", response['output'])
                
            except KeyboardInterrupt:
                print("\n\nMerci d'avoir utilis√© l'Assistant Fiscal Premium. Au revoir !")
                break
                
            except Exception as e:
                print(f"\n‚ö†Ô∏è Une erreur est survenue : {str(e)}")
                print("Veuillez reformuler votre question ou contacter le support technique.")
                self.vider_cache()

if __name__ == "__main__":
    assistant = PremiumFiscalAssistant()
    assistant.run()
